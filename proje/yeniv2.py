# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'proje.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets,Qt
from PyQt5.QtGui import QImage
from PyQt5.QtWidgets import QMessageBox


import cv2
import numpy as np
import face_recognition
import os
import csv

from datetime import datetime
from PyQt5.QtCore import QTimer,QTime,QDate
class Ui_YuzTanima(object):
    def setupUi(self, YuzTanima):
        YuzTanima.setObjectName("YuzTanima")
        YuzTanima.resize(935, 600)
        YuzTanima.setStyleSheet("background-color: rgb(30, 41, 59);\n"
"color:white;")
        self.centralwidget = QtWidgets.QWidget(YuzTanima)
        self.centralwidget.setObjectName("centralwidget")
        self.lblimg = QtWidgets.QLabel(self.centralwidget)
        self.lblimg.setGeometry(QtCore.QRect(30, 10, 561, 461))
        self.lblimg.setText("")
        self.lblimg.setObjectName("lblimg")
        self.gbdetay = QtWidgets.QGroupBox(self.centralwidget)
        self.gbdetay.setGeometry(QtCore.QRect(620, 0, 291, 221))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.gbdetay.setFont(font)
        self.gbdetay.setStyleSheet("")
        self.gbdetay.setObjectName("gbdetay")
        self.lblisim = QtWidgets.QLabel(self.gbdetay)
        self.lblisim.setGeometry(QtCore.QRect(10, 60, 191, 41))
        self.lblisim.setStyleSheet("font-size:18px;\n"
"font-weight:bold;")
        self.lblisim.setObjectName("lblisim")
        self.lbbldurum = QtWidgets.QLabel(self.gbdetay)
        self.lbbldurum.setGeometry(QtCore.QRect(10, 140, 191, 51))
        self.lbbldurum.setStyleSheet("font-size:18px;\n"
"font-weight:bold;")
        self.lbbldurum.setObjectName("lbbldurum")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(50, 490, 501, 51))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.btntani = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.btntani.setFont(font)
        self.btntani.setStyleSheet("border:1px solid #3b82f6;\n"
"padding:5px 0px;\n"
"border-radius:5px;\n"
"color:#e5e5e5;")
        self.btntani.setObjectName("btntani")
        self.horizontalLayout.addWidget(self.btntani)
        self.btncikis = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.btncikis.setFont(font)
        self.btncikis.setStyleSheet("border:1px solid #3b82f6;\n"
"padding:5px 0px;\n"
"border-radius:5px;\n"
"color:#e5e5e5;")
        self.btncikis.setObjectName("btncikis")
        self.horizontalLayout.addWidget(self.btncikis)
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(620, 350, 291, 111))
        self.widget1.setObjectName("widget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.llbtarih = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        self.llbtarih.setFont(font)
        self.llbtarih.setStyleSheet("font-size:18px;\n"
"font-weight:bold;")
        self.llbtarih.setObjectName("llbtarih")
        self.verticalLayout.addWidget(self.llbtarih)
        self.lblsaat = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        self.lblsaat.setFont(font)
        self.lblsaat.setStyleSheet("font-size:18px;\n"
"font-weight:bold;")
        self.lblsaat.setObjectName("lblsaat")
        self.verticalLayout.addWidget(self.lblsaat)
        YuzTanima.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(YuzTanima)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 935, 22))
        self.menubar.setObjectName("menubar")
        YuzTanima.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(YuzTanima)
        self.statusbar.setObjectName("statusbar")
        YuzTanima.setStatusBar(self.statusbar)

        # Butonların fonksiyon bağlantıları

        self.btntani.clicked.connect(self.sistemiBaslat)
        self.btncikis.clicked.connect(self.cikis)
        self.cap = cv2.VideoCapture(0)

        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)

        self.retranslateUi(YuzTanima)
        QtCore.QMetaObject.connectSlotsByName(YuzTanima)

    def sistemiBaslat(self):
        try:
            print("")
            path = 'Images'
            self.images = []
            self.classNames = []
            self.myList = os.listdir(path)
            print(self.myList)
            for cl in self.myList:
                curImg = cv2.imread(f'{path}/{cl}')
                self.images.append(curImg)
                self.classNames.append(os.path.splitext(cl)[0])
            print(self.classNames)

            encodeListKnown = self.findEncodings(self.images)

            while True:
                success, img = self.cap.read()
                imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
                imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

                facesCurFrame = face_recognition.face_locations(imgS)  # find locations
                encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)  # yüzün konumunu gönderiyoruz

                for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
                    matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
                    faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
                    # print(matches,faceDis)
                    matchIndex = np.argmin(faceDis)

                    if matches[matchIndex]:
                        name = self.classNames[matchIndex].upper()
                        # print(name)
                        y1, x2, y2, x1 = faceLoc
                        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4  # çözünürlük artırıldı.daha iyi çalışması için girdi görüntüsünü büyütmek, yüz tanıma algoritmasının performansını artırırken, işlem süresini kısaltabilir.

                        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
                        cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
                        self.lblisim.setText("İsim: " + name)
                        self.lbbldurum.setText("Durum: Tanımlandı")
                        # markAttendance('Elon')
                    else:

                        y1, x2, y2, x1 = faceLoc
                        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4  # çözünürlük artırıldı.daha iyi çalışması için girdi görüntüsünü büyütmek, yüz tanıma algoritmasının performansını artırırken, işlem süresini kısaltabilir.

                        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
                        cv2.putText(img, "Kisi taninamadi", (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1,
                                    (255, 255, 255), 2)
                        self.lblisim.setText("İsim: Kişi taninamadi")
                        self.lbbldurum.setText("Durum: Tanımlanmadı")

                # cv2.imshow('Webcam', img)
                self.setPhoto(img)
                if cv2.waitKey(1) == ord('q'):
                    break

        except Exception as e:
            print("sistemi başlatırken bir hata oluştu")
        print("sistem başlatılıyor")

    def setPhoto(self, image):
        try:
            frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.lblimg.setPixmap(QtGui.QPixmap.fromImage(image))

        except:
            self.ShowMessage(QMessageBox.Warning, "Resim Değiştirilirken Hata Oluştu.", "Uyarı")

    def findEncodings(self, images):
        encodeList = []
        for img in images:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            encode = face_recognition.face_encodings(img)[0]
            encodeList.append(encode)
        return encodeList

    def update_time(self):

        try:
            self.current_time = QTime.currentTime().toString('hh:mm:ss')
            self.lblsaat.setText("Saat: " + self.current_time)

            current_date = QDate.currentDate()
            formatted_date = current_date.toString()
            self.llbtarih.setText("Tarih: " + formatted_date)
        except:
            print("hata!")

    def cikis(self):
        print("çıkış yapılıyor")
        YuzTanima.close()
        exit()

    def retranslateUi(self, YuzTanima):
        _translate = QtCore.QCoreApplication.translate
        YuzTanima.setWindowTitle(_translate("YuzTanima", "Yüz Tanıma"))
        self.gbdetay.setTitle(_translate("YuzTanima", "Detaylar"))
        self.lblisim.setText(_translate("YuzTanima", "İsim:"))
        self.lbbldurum.setText(_translate("YuzTanima", "Durum:"))
        self.btntani.setText(_translate("YuzTanima", "Tanımla"))
        self.btncikis.setText(_translate("YuzTanima", "Çıkış"))
        self.llbtarih.setText(_translate("YuzTanima", "Tarih:"))
        self.lblsaat.setText(_translate("YuzTanima", "Saat:"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    YuzTanima = QtWidgets.QMainWindow()
    ui = Ui_YuzTanima()
    ui.setupUi(YuzTanima)
    YuzTanima.show()
    sys.exit(app.exec_())
